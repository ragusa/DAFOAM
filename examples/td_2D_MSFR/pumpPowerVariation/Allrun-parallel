#!/bin/bash

# ensure that the script exits immediately if a command within exits with a non-zero status
set -e

# Source OpenFOAM environment functions
# The :? will cause the script to exit if WM_PROJECT_DIR is not set.
. ${WM_PROJECT_DIR:?}/bin/tools/RunFunctions

# Use the first argument as NProcess, or default to the number of available cores.
NProcess=${1:-$(nproc)}

# Function to set up a single case
set-up-case(){
     abs_momentumSource_z="${1}"
     file_of_concern1="./constant/fluidRegion/phaseProperties"
     file_of_concern2="./system/fluidRegion/decomposeParDict"
     file_of_concern3="./system/neutroRegion/decomposeParDict"
    
    # Simple check for existence
    if [[ ! -f "${file_of_concern1}" ]]; then
        echo "Error: ${file_of_concern1} does not exist in the case directory." >&2
        exit 1
    fi
    
    echo "--> Setting momentum source Z to: -${abs_momentumSource_z}"
   sed -i "s/momentumSource      (0 0 -300000);/momentumSource      (0 0 -${abs_momentumSource_z});/" ${file_of_concern1}
    
    echo "--> Setting numberOfSubdomains to: ${NProcess}"
    sed -i "s/numberOfSubdomains  4;/numberOfSubdomains  ${NProcess};/" ${file_of_concern2}
    sed -i "s/numberOfSubdomains  4;/numberOfSubdomains  ${NProcess};/" ${file_of_concern3}
    echo "--> Decomposing domain for parallel run..."
    decomposePar -allRegions
    
    return 0
}

# --- Main Script ---

# define the Data file
DataFile="./Data/data.csv"
# define the directory where different cases are kept
case_space="./case_space"
# define the template directory
# this is the root case upon which all other cases in the ./case_space directory are based
directory_template="./template"

# Check if required files/directories exist
if [[ ! -f "${DataFile}" ]]; then
    echo "Error: Data file '${DataFile}' not found." >&2
    exit 1
fi

if [[ ! -d "${directory_template}" ]]; then
    echo "Error: Template directory '${directory_template}' not found." >&2
    exit 1
fi

# Create the case space if it doesn't exist
mkdir -p "${case_space}"

# --- Main Loop ---
while IFS=, read -r caseName abs_momentumSource_z
do
    echo "-----------------------------------------------------"
    echo "Processing Case: ${caseName}"
    echo "Momentum Source Z (Absolute): ${abs_momentumSource_z}"
    echo "-----------------------------------------------------"
    
    new_case="${case_space}/${caseName}"
    
    if [[ -d "${new_case}" ]]; then
        echo "Warning: Case directory '${new_case}' already exists. Skipping copy."
    else
        cp -r "${directory_template}" "${new_case}"
        echo "Directory Created: ${new_case}"
    fi
    
    # Run the case setup and simulation in a subshell to isolate the 'cd'
    (
        cd "${new_case}"
        
        # Set up the case files
        set-up-case "${abs_momentumSource_z}"
        echo "Case has been set up."
        
        # Run the simulation
        echo "--> Starting simulation with $(getApplication)..."
        if mpirun -np ${NProcess} $(getApplication) -parallel < /dev/null > case-run.log 2>&1; then
            echo "--> Simulation completed successfully for ${caseName}."
        else
            echo "*****************************************************" >&2
            echo "ERROR: Simulation FAILED for case ${caseName}." >&2
            echo "Check the log file for details: ${new_case}/case-run.log" >&2
            echo "*****************************************************" >&2
            # With 'set -e', the script would exit here automatically.
            # If you remove 'set -e', you might want an 'exit 1' here to stop on failure.
            exit 1
        fi
        
        # Reconstruct the case if the simulation was successful
        echo "--> Reconstructing domain..."
        reconstructPar -allRegions
        
        echo "Done with ${caseName}."
    )
    
done < <(tail -n +2 "${DataFile}")

echo "=========================================="
echo "All cases processed."
echo "=========================================="