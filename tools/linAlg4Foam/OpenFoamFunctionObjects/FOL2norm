/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2406                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/

// This function object calculates the L2 norm of a field.
//
// Input arguments:
// - path to the snapshot (time folder)
// - field

L2norm
{
    type          coded;
    libs          (utilityFunctionObjects);
    region        region0;

    name          L2norm;

    codeWrite
    #{
        // Read the list of fields in python format (e.g., ['T', 'DT'])
        string inputLine;
        std::cout << "Enter list of fields: ";
        std::getline(std::cin, inputLine);

        // Strip square brackets
        if (!inputLine.empty() && inputLine.front() == '[') inputLine.erase(0, 1);
        if (!inputLine.empty() && inputLine.back() == ']') inputLine.pop_back();

        // Split and clean elements
        wordList fieldList;
        std::stringstream ss(inputLine);
        std::string item;
    
        while (std::getline(ss, item, ',')) {
            // Remove single quotes and whitespace
            item.erase(std::remove(item.begin(), item.end(), '\''), item.end());
            item.erase(0, item.find_first_not_of(" \t"));
            item.erase(item.find_last_not_of(" \t") + 1);

            if (item.find("Region") != std::string::npos) {
                item = "../" + item;
            }
    
            fieldList.append(word(item));
        }
    
        Info << "Parsed fields:" << nl;
        forAll(fieldList, i)
        {
            Info << "  - " << fieldList[i] << nl;
        }

        // Loop for field + snapshot sampling
        while (true)
        {
            // Define strings 
            string snapshotPath;

            // Get snapshot path
            std::cout << "Enter snapshot path: ";
            if (!std::getline(std::cin, snapshotPath) || snapshotPath.empty())
            {
                break;
            }

            // Construct snapshot path
            std::string fieldTime = snapshotPath;

            forAll(fieldList, fieldI)
            {
                volScalarField field
                (
                    IOobject
                    (
                        fieldList[fieldI],
                        fieldTime,
                        mesh(),
                        IOobject::MUST_READ,
                        IOobject::NO_WRITE
                    ),
                    mesh()
                );
    
                volScalarField field2 = magSqr(field);
                dimensionedScalar L2sum = Foam::fvc::domainIntegrate(field2);

                scalar L2norm = sqrt(L2sum.value());

                // Info output
                string snapshotID = snapshotPath.substr(snapshotPath.rfind('/', snapshotPath.rfind('/') - 1) + 1);
                Info << "L2norm: " << snapshotID << ", " << fieldList[fieldI] << " = " << L2norm << endl;
            }
        }

    #};
}

// ************************************************************************* //

